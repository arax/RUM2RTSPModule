/*
 Filter processor module.
 
 This file is part of RUM2.

 RUM2 is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

//////////////////////////////////////////////////////////////////////////////
/// \file
/// Filter processor module for RUM2.
/// \author arax
/// \date 2010
/// \version 2010/03/17
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
/// Guard
//////////////////////////////////////////////////////////////////////////////
#ifndef PROCESSOR_FILTER_H
#define PROCESSOR_FILTER_H

#include <rum2/module.h>
#include <stdio.h>

//////////////////////////////////////////////////////////////////////////////
/// Default name of this module.
///
/// This name is only temporary (used during init).
//////////////////////////////////////////////////////////////////////////////
#define PROCESSOR_FILTER  "filter"


#if STATIC_PROCESSOR_FILTER || STATIC
# define STATIC_PROCESSOR_FILTER_ITEM \
    { PROCESSOR_FILTER, processor_filter_initialize },
#else
//////////////////////////////////////////////////////////////////////////////
/// Static module description (MUST end with a comma).
//////////////////////////////////////////////////////////////////////////////
# define STATIC_PROCESSOR_FILTER_ITEM
#endif

//////////////////////////////////////////////////////////////////////////////
/// \see filter.c
//////////////////////////////////////////////////////////////////////////////
#if STATIC_PROCESSOR_FILTER || STATIC
extern int processor_filter_initialize(struct module *module);
#else
extern int initialize(struct module *module);
#endif

//////////////////////////////////////////////////////////////////////////////
/// \see filter.c
//////////////////////////////////////////////////////////////////////////////
static int m_name(struct module *module, int id);

//////////////////////////////////////////////////////////////////////////////
/// \see filter.c
//////////////////////////////////////////////////////////////////////////////
static int m_init(struct module *module);

//////////////////////////////////////////////////////////////////////////////
/// \see filter.c
//////////////////////////////////////////////////////////////////////////////
static void m_main(struct module *module);

//////////////////////////////////////////////////////////////////////////////
/// \see filter.c
//////////////////////////////////////////////////////////////////////////////
static void m_clean(struct module *module, int for_restart);

//////////////////////////////////////////////////////////////////////////////
/// \see filter.c
//////////////////////////////////////////////////////////////////////////////
static int m_config(struct module *module, const char *name, int start);

//////////////////////////////////////////////////////////////////////////////
/// \see filter.c
//////////////////////////////////////////////////////////////////////////////
static void m_stop(struct module *module);

//////////////////////////////////////////////////////////////////////////////
/// Module interface structure.
//////////////////////////////////////////////////////////////////////////////
static struct module_interface iface = {
    MODULE_VERSION, ///< version
    m_name,         ///< name()
    NULL,           ///< conflicts()
    m_init,         ///< init()
    m_main,         ///< main()
    m_stop,         ///< stop()
    m_clean,        ///< clean()
    NULL,           ///< push_data()
    NULL,           ///< push_message()
    NULL,           ///< events()
    m_config        ///< config()
};

//////////////////////////////////////////////////////////////////////////////
/// Filter parameter - name.
///
/// Human-readable name of a module parameter.
//////////////////////////////////////////////////////////////////////////////
#define PARAM_FILTER   "Filter"

//////////////////////////////////////////////////////////////////////////////
/// Filter parameter - description.
///
/// Human-readable description of \a PARAM_FILTER parameter.
//////////////////////////////////////////////////////////////////////////////
#define PARAM_FILTER_DESC  "sample of unwanted data"

//////////////////////////////////////////////////////////////////////////////
/// Module parameters.
///
/// Names, descriptions and default values for module parameters.
//////////////////////////////////////////////////////////////////////////////
static struct module_param params[] = {
    { NULL, PARAM_FILTER, PARAM_FILTER_DESC, "ping\0", NULL }
};

//////////////////////////////////////////////////////////////////////////////
/// Number of startup parameters.
//////////////////////////////////////////////////////////////////////////////
#define params_count (sizeof(params) / sizeof(struct module_param))

//////////////////////////////////////////////////////////////////////////////
/// Module internal data.
///
/// Module-specific data, pointers to structures.
//////////////////////////////////////////////////////////////////////////////
struct filter_data {
    struct queue_group *qgroup; ///< Queue group for waiting on queue(s).
    struct module *master;      ///< Module processor/master.
    char *data_sample;          ///< Sample data to be masked in output_queue(s).
};

#endif
